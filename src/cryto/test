import java.io.File;
import java.io.FileOutputStream;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Formatter;
import javax.crypto.Cipher; 

public class hoho { 
	public static void main(String[] args) throws Exception {
		File publicKeyFile = new File("keyhome/local_pub.pem");
		File privateKeyFile = new File("keyhome/local_pri.key");
		PublicKey publicKey = null;
		PrivateKey privateKey = null;
		if (publicKeyFile.exists() && privateKeyFile.exists()) {
			// 파일에서 키 읽어오기
			Path publicFile = Paths.get("keyhome/local_pub.pem");
			byte[] publicKeyBytes = Files.readAllBytes(publicFile);
			Path privateFile = Paths.get("keyhome/local_pri.key");
			byte[] privateKeyBytes = Files.readAllBytes(privateFile);
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			publicKey = keyFactory.generatePublic(new X509EncodedKeySpec(publicKeyBytes));
			privateKey = keyFactory.generatePrivate(new PKCS8EncodedKeySpec(privateKeyBytes));
		} else {
			// 공개키쌍 생성
			KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
			generator.initialize(1024);
			KeyPair pair = generator.generateKeyPair();
			publicKey = pair.getPublic();
			privateKey = pair.getPrivate();
			FileOutputStream outputPublic = new FileOutputStream(new File("public.key"));
			outputPublic.write(publicKey.getEncoded());
			FileOutputStream outputPrivate = new FileOutputStream(new File("private.key"));
			outputPrivate.write(privateKey.getEncoded());
		}
		System.out.println("공개키: "+bytesToHex(publicKey.getEncoded()));
		System.out.println("개인키: "+bytesToHex(privateKey.getEncoded()));
		
		// 암호화
		String plainText = "오늘도 별이 바람에 스치운다.";
		System.out.println("평문: "+plainText);
		Charset charset = Charset.forName("UTF-8");
		byte[] encryptData = encrypt(publicKey, plainText.getBytes(charset));
		System.out.println("암호문: "+bytesToHex(encryptData));
		
		// 복호화
		byte[] plainData = decrypt(privateKey, encryptData);
		String decryptedText = new String(plainData, charset);
		System.out.println("복호화: "+decryptedText);
	}

	public static byte[] encrypt(PublicKey publicKey, byte[] plainData)
	throws GeneralSecurityException {
		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		cipher.init(Cipher.ENCRYPT_MODE, publicKey);
		byte[] encryptData = cipher.doFinal(plainData);
		return encryptData;
	}
	
	public static byte[] decrypt(PrivateKey privateKey, byte[] encryptData)
	throws GeneralSecurityException {
		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		cipher.init(Cipher.DECRYPT_MODE, privateKey);
		byte[] plainData = cipher.doFinal(encryptData);
		return plainData;
	}
		
	public static String bytesToHex(byte[] bytes) {
	    StringBuilder sb = new StringBuilder(bytes.length * 2);
	    @SuppressWarnings("resource")
		Formatter formatter = new Formatter(sb);
	    for (byte b : bytes) {
	        formatter.format("%02x", b);
	    }
	    return sb.toString();
	}
}
